window.SIDEBAR_ITEMS = {"enum":[["CallSource","Where are we calling [`run`] from?"],["MsgSenderError","Errors that can occur when constructing or sending messages using [`MsgSender`]."]],"fn":[["decide_logging_enabled","Checks the `RERUN` environment variable. If not found, returns the argument."],["default_server_addr","The default address of a Rerun TCP server which an SDK connects to."],["global_session","Access a global [`Session`] singleton for convenient logging."],["new_recording_info","Creates a new [`re_log_types::RecordingInfo`] which can be used with [`Session::new`]."],["run","Run the Rerun application and return an exit code."]],"mod":[["clap","Module for integrating with the `clap` command line argument parser. This module provides integration with integration with `clap`."],["components","These are the different components you can log."],["coordinates","Coordinate system helpers, for use with [`components::ViewCoordinates`]."],["crash_handler",""],["demo_util","This module contains utilities to support Rerun examples."],["external","Re-exports of other crates."],["log","Things directly related to logging."],["native_viewer","Methods for spawning the native viewer and streaming the SDK log stream to it."],["run",""],["sink","Different destinations for log messages."],["time","Time-related types."],["web_viewer","Methods for spawning the web viewer and streaming the SDK log stream to it."]],"struct":[["ApplicationId","The user-chosen name of the application doing the logging."],["ComponentName","The name of an entity component, e.g. `pos` or `color`."],["EntityPath","`camera / \"left\" / points / #42`"],["MsgSender","Facilitates building and sending component payloads with the Rerun SDK."],["RecordingId","A unique id per recording (a stream of [`LogMsg`]es)."],["Session","The main way to do Rerun loggning."],["SessionBuilder","Construct a [`Session`]."]],"trait":[["Component","A type that can used as a Component of an Entity."],["SerializableComponent","A [`Component`] that fulfils all the conditions required to be serialized as an Arrow payload."]]};