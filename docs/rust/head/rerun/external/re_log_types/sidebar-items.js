window.SIDEBAR_ITEMS = {"enum":[["BatchIndex",""],["DataCellError",""],["DataRowError",""],["DataTableError",""],["EntityPathPart","The different parts that make up an [`EntityPath`]."],["Index","The key of a table."],["LogMsg","The most general log message sent from the SDK to the server."],["Mesh3D","A Generic 3D Mesh."],["MeshFormat","The format of a binary mesh file, e.g. GLTF, GLB, OBJ"],["PathOp","Operation to perform on an [`EntityPath`], e.g. clearing all components."],["PathParseError",""],["RecordingSource",""],["TensorDataType","The data types supported by a [`crate::component_types::Tensor`]."],["TensorElement","The data that can be stored in a [`crate::component_types::Tensor`]."],["TimeType","The type of a [`TimeInt`] or [`Timeline`]."],["Transform","A transform between two spaces."]],"fn":[["parse_entity_path","Parses an entity path, e.g. `foo/bar/#1234/5678/\"string index\"/a6a5e96c-fd52-4d21-a394-ffbb6e5def1d`"]],"macro":[["entity_path","Build a `EntityPath`:"],["entity_path_vec","Build a `Vec<EntityPathPart>`:"],["impl_into_enum",""]],"mod":[["arrow_msg","[`ArrowMsg`] is the [`crate::LogMsg`] sub-type containing an Arrow payload."],["component_types","Potentially user-facing component types."],["datagen","Generate random data for tests and benchmarks."],["encoding","Encoding/decoding [`LogMsg`]:es as `.rrd` files."],["external",""],["hash",""],["path","Every logged entity in Rerun is logged to an [`EntityPath`]."],["time_point",""]],"struct":[["AnnotationContext","The `AnnotationContext` provides additional information on how to display entities."],["ApplicationId","The user-chosen name of the application doing the logging."],["Arrow3D","A 3D Arrow"],["ArrowMsg","Message containing an Arrow payload"],["BBox2D",""],["BeginRecordingMsg",""],["Box3","Oriented 3D box"],["ComponentName","The name of an entity component, e.g. `pos` or `color`."],["ComponentPath","A [`EntityPath`] plus a [`ComponentName`]."],["DataCell","A cell’s worth of data, i.e. a uniform array of values for a given component type. This is the leaf type in our data model."],["DataRow","A row’s worth of data, i.e. an event: a list of [`DataCell`]s associated with an auto-generated `RowId`, a user-specified [`TimePoint`] and [`EntityPath`], and an expected number of instances. This is the middle layer in our data model."],["DataTable","A sparse table’s worth of data, i.e. a batch of events: a collection of [`DataRow`]s. This is the top-level layer in our data model."],["Duration","A signed duration represented as nanoseconds since unix epoch"],["EncodedMesh3D","Compressed/encoded mesh format"],["EntityPath","`camera / \"left\" / points / #42`"],["EntityPathHash","A 64 bit hash of [`EntityPath`] with very small risk of collision."],["EntityPathImpl","`camera / \"left\" / points / #42`"],["EntityPathOpMsg","An operation (like a ‘clear’) on an [`EntityPath`]."],["IndexHash","A 128 bit hash of [`Index`] with negligible risk of collision."],["MeshId","A unique id per [`Mesh3D`]."],["MsgId","A unique id per [`crate::LogMsg`]."],["Pinhole","Camera perspective projection (a.k.a. intrinsics)."],["PythonVersion",""],["RawMesh3D","A raw “triangle soup” mesh."],["RecordingId","A unique id per recording (a stream of [`LogMsg`]es)."],["RecordingInfo",""],["Rigid3","A proper rigid 3D transform, i.e. a rotation and a translation."],["Time","A date-time represented as nanoseconds since unix epoch"],["TimeInt","A 64-bit number describing either nanoseconds OR sequence numbers."],["TimePoint","A point in time on any number of [`Timeline`]s."],["TimeRange",""],["TimeRangeF","Like [`TimeRange`], but using [`TimeReal`] for improved precision."],["TimeReal","Either nanoseconds or sequence numbers."],["Timeline","A time frame/space, e.g. `log_time` or `frame_nr`, coupled with the type of time it keeps."],["TimelineName","The name of a timeline. Often something like `\"log_time\"` or `\"frame_nr\"`."],["ViewCoordinates","How we interpret the coordinate system of an entity/space."]],"trait":[["Component","A type that can used as a Component of an Entity."],["DeserializableComponent","A [`Component`] that fulfils all the conditions required to be deserialized from an Arrow payload."],["SerializableComponent","A [`Component`] that fulfils all the conditions required to be serialized as an Arrow payload."],["TensorDataTypeTrait",""]],"type":[["DataCellResult",""],["DataRowResult",""],["DataTableResult",""],["Quaternion","Order: XYZW"]]};